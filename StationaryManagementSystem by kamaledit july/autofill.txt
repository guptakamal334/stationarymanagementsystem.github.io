package sms;


import java.sql.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.Statement;
import javax.swing.JOptionPane;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmployeeLogin.java
 *
 * 
 */

/**
 *
 * @author student
 */
public class EmployeeLogin extends javax.swing.JFrame {
 Connection con = null;
    ResultSet rs = null;
    PreparedStatement ps = null;
    /** Creates new form SalesPersonLogin */
    public EmployeeLogin() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        jPanel1 = new javax.swing.JPanel();
        EmpLoginbtn = new javax.swing.JButton();
        cancelBTN = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        passwordTF = new javax.swing.JPasswordField();
        userIDTF = new javax.swing.JTextField();
        EmpLoginheading = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Stationery Management System");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setMinimumSize(new java.awt.Dimension(415, 280));

        EmpLoginbtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        EmpLoginbtn.setText("Login");
        EmpLoginbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmpLoginbtnActionPerformed(evt);
            }
        });

        cancelBTN.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cancelBTN.setText("Cancel");
        cancelBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBTNActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Password");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("User ID");

        passwordTF.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        passwordTF.setEchoChar('*');

        userIDTF.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        EmpLoginheading.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        EmpLoginheading.setText("EMPLOYEE LOGIN");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(EmpLoginbtn)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBTN)
                        .addGap(139, 139, 139))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userIDTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(90, 90, 90))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(EmpLoginheading, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(EmpLoginheading, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EmpLoginbtn)
                    .addComponent(cancelBTN))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel1.getAccessibleContext().setAccessibleName("");

        getAccessibleContext().setAccessibleName("Sales Person Login");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void EmpLoginbtnActionPerformed(java.awt.event.ActionEvent evt) {                                            
    try
        {
            if(userIDTF.getText().length()==0)
            {
                jOptionPane1.showMessageDialog(rootPane, "Please Enter User ID");
            }
            else if(passwordTF.getText().length()==0)
            {
                jOptionPane1.showMessageDialog(rootPane,"Please Enter User Password");
            }
            else{
                DBConnection connection=new DBConnection();
                con = connection.getConnection();
                System.out.println(con);
                Statement st = con.createStatement();
                ResultSet rs=st.executeQuery("Select Count(*)from employee_detail where emp_id='"+userIDTF.getText()+"'and emp_password='"+passwordTF.getText()+"'");

                int i=0;
                while(rs.next())
                {
                    i=rs.getInt(1);
                }
                if(i==0)
                {
                    JOptionPane.showMessageDialog(this,"Invalid Admin_Name or Password","Error",JOptionPane.ERROR_MESSAGE);
                }
                else
                {
                    EmpHomePage obj=new EmpHomePage();
                    obj.show();
                    obj.autoFillEmpDetail(userIDTF.getText());
                    //obj.hmEmp_Id.setText(userIDTF.getText());
                }
                this.hide();
            }
        }
        catch(Exception e)
        {
            System.out.println(e+"");
        }
}                                           

    private void cancelBTNActionPerformed(java.awt.event.ActionEvent evt) {                                          
     MainHomePage lg = new MainHomePage();
        dispose();
        lg.show();
    }                                         

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeLogin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton EmpLoginbtn;
    private java.awt.Label EmpLoginheading;
    private javax.swing.JButton cancelBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField passwordTF;
    public static javax.swing.JTextField userIDTF;
    // End of variables declaration                   

}










































































package sms;

import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Date;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static sms.AdminHomepage.EmpTbl;
import static sms.AdminHomepage.obj;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mohammedshakirshah
 */
public class EmpHomePage extends javax.swing.JFrame {
    Connection con = null;
    
    DBConnection connecting = new DBConnection();
    PreparedStatement ps = null;
    public EmpHomePage() {
        initComponents();
        con=connecting.getConnection();
        tableColumn();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        hmEmp_Id = new javax.swing.JTextField();
        EmpHmEmp_Name = new javax.swing.JTextField();
        EmpHmEmp_phone = new javax.swing.JTextField();
        EmpHmEmp_Email = new javax.swing.JTextField();
        EmpHmRqstBTN = new javax.swing.JButton();
        EmpHMLOGOUTbtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        EmpDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        EmpItemCombox = new javax.swing.JComboBox<>();
        EmpItemTF = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        EmpQuantityTF = new javax.swing.JTextField();
        AddKartBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        kartItemTBL = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        itemCodeTF = new javax.swing.JTextField();
        requestLabel = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        requestNumberTF = new javax.swing.JTextField();
        searchBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Stationery Management System");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Employee ID");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Employee Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Phone");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("E-mail");

        hmEmp_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hmEmp_IdActionPerformed(evt);
            }
        });

        EmpHmRqstBTN.setBackground(new java.awt.Color(0, 0, 0));
        EmpHmRqstBTN.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        EmpHmRqstBTN.setForeground(new java.awt.Color(255, 255, 255));
        EmpHmRqstBTN.setText("REQUEST");
        EmpHmRqstBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmpHmRqstBTNActionPerformed(evt);
            }
        });

        EmpHMLOGOUTbtn.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        EmpHMLOGOUTbtn.setText("LOGOUT");
        EmpHMLOGOUTbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmpHMLOGOUTbtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("WELCOME EMPLOYEE");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setText("Current Date");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("Request Status");

        EmpItemCombox.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        EmpItemCombox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Items", "Pens", "Pencils", "Erasers", "Papers", "Clip Folders", "Paper Folders", "Paper Bags", "Envoleps", "Clips", "Staplers", "Paper Cutters", "Paper Punch", "Scale", "Tape", "Sharpner", "Notebook", "Diary" }));
        EmpItemCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmpItemComboxActionPerformed(evt);
            }
        });

        EmpItemTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmpItemTFActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setText("Quantity");

        EmpQuantityTF.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N

        AddKartBTN.setBackground(new java.awt.Color(0, 0, 0));
        AddKartBTN.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        AddKartBTN.setForeground(new java.awt.Color(255, 255, 255));
        AddKartBTN.setText("ADD");
        AddKartBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddKartBTNActionPerformed(evt);
            }
        });

        kartItemTBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(kartItemTBL);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel9.setText("Item Code");

        requestLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        requestLabel.setForeground(new java.awt.Color(255, 153, 0));
        requestLabel.setText("Pending");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel10.setText("Request Number");

        searchBTN.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        searchBTN.setText("Search");
        searchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hmEmp_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmpHmEmp_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmpHmEmp_phone, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmpHmEmp_Email, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmpDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(318, 318, 318)
                        .addComponent(EmpHMLOGOUTbtn)
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(requestNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchBTN)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9)
                            .addComponent(EmpItemCombox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddKartBTN)
                            .addComponent(jLabel8))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EmpHmRqstBTN)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(itemCodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(EmpItemTF, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(EmpQuantityTF, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(28, 28, 28)
                        .addComponent(requestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EmpHMLOGOUTbtn)
                    .addComponent(jLabel5))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(requestNumberTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchBTN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(hmEmp_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(EmpHmEmp_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(EmpHmEmp_phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(EmpHmEmp_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(EmpDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(requestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(itemCodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EmpItemCombox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmpItemTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmpQuantityTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddKartBTN)
                            .addComponent(EmpHmRqstBTN))
                        .addGap(86, 86, 86))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void tableColumn() {
        
                 
            Vector<String> column = new Vector<String>();
           column.addElement("ITEM CODE");
            column.addElement("ITEM NAME");
            column.addElement("QUANTITY");
            
            DefaultTableModel model = (DefaultTableModel) kartItemTBL.getModel();
            model.setDataVector(null, column);
    }

    public void autoFillEmpDetail(String id){
    try
    {
    Statement st = con.createStatement();
    
    ResultSet rs=st.executeQuery("Select * from employee_detail where emp_id='"+id+"'");
    hmEmp_Id.setText(id);
    while(rs.next())
    {
        //Object []x={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6)};        
        EmpHmEmp_Name.setText(rs.getString(2));
        
        EmpHmEmp_phone.setText(rs.getString(4));
        EmpHmEmp_Email.setText(rs.getString(6));
       Date date2 = new Date();
        EmpDateChooser.setDate(date2);
        
    }
}
catch(Exception e)
{
    System.out.println(e+"");
}
    }
    private void hmEmp_IdActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void EmpHMLOGOUTbtnActionPerformed(java.awt.event.ActionEvent evt) {                                               
        EmployeeLogin obj=new EmployeeLogin();
                    obj.show();
                    dispose();
    }                                              

    private void EmpItemComboxActionPerformed(java.awt.event.ActionEvent evt) {                                              
        switch(EmpItemCombox.getSelectedIndex()) {
            case 0:
            itemCodeTF.setText("");
            break;
            case 1:
            itemCodeTF.setText("01");
            break;
            case 2:
            itemCodeTF.setText("02");
            break;
            case 3:
            itemCodeTF.setText("03");
            break;
            case 4:
            itemCodeTF.setText("04");
            break;
            case 5:
            itemCodeTF.setText("05");
            break;
            case 6:
            itemCodeTF.setText("06");
            break;
            case 7:
            itemCodeTF.setText("07");
            break;
            case 8:
            itemCodeTF.setText("08");
            break;
            case 9:
            itemCodeTF.setText("09");
            break;
            case 10:
            itemCodeTF.setText("10");
            break;
            case 11:
            itemCodeTF.setText("11");
            break;
            case 12:
            itemCodeTF.setText("12");
            break;
             case 13:
            itemCodeTF.setText("13");
            break;
            case 14:
            itemCodeTF.setText("14");
            break;
            case 15:
            itemCodeTF.setText("15");
            break;
            case 16:
            itemCodeTF.setText("16");
            break;
            case 17:
            itemCodeTF.setText("17");
            break;
}
        if(EmpItemCombox.getSelectedIndex()==0){
            EmpItemTF.setText("");
        }else{
            EmpItemTF.setText(EmpItemCombox.getSelectedItem().toString());
        }
    }                                             

    private void EmpHmRqstBTNActionPerformed(java.awt.event.ActionEvent evt) {                                             
        
        try
    {
    Statement st = con.createStatement();
    int max=0;
    int requestStatus=0;//status request pending
    int Pens =0,Pencils=0,Erasers=0,Papers=0,Clip_Folders=0,Paper_Folders=0,Paper_Bags=0,Envoleps=0,Clips=0,Staplers=0,Paper_Cutters=0,Paper_Punch=0,Scale=0,Tape=0,Sharpner=0,Notebook=0,Diary=0;
    String reqNumber;
    ResultSet rs=st.executeQuery("Select max(request_number) from request_table");
    SimpleDateFormat sdf=new SimpleDateFormat("dd-MMM-yyyy");
    if(rs.next())
    {
        //Object []x={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6)};
        max=rs.getInt(1)+1;
        //EmpHmEmp_Name.setText(rs.getString(2));
        //EmpHmEmp_phone.setText(rs.getString(4));
        //EmpHmEmp_Email.setText(rs.getString(6));
       //Date date2 = new Date();
        //EmpDateChooser.setDate(date2);
        
    }
    for(int i=0;i<kartItemTBL.getRowCount();i++){
        if(kartItemTBL.getValueAt(i, 1).equals("Pens")){
            Pens=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Pencils")){
            Pencils=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Erasers")){
            Erasers=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Papers")){
            Papers=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Clip Folders")){
            Clip_Folders=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Paper Folders")){
            Paper_Folders=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Paper Bags")){
            Paper_Bags=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Envoleps")){
            Envoleps=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Clips")){
            Clips=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Staplers")){
            Staplers=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Paper Cutters")){
            Paper_Cutters=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Paper Punch")){
            Paper_Punch=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Scale")){
            Scale=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Tape")){
            Tape=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Sharpner")){
            Sharpner=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Notebook")){
            Notebook=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }else if(kartItemTBL.getValueAt(i, 1).equals("Diary")){
            Diary=Integer.parseInt(kartItemTBL.getValueAt(i, 2).toString());
        }
    }

    reqNumber="req"+max;
    PreparedStatement ps=con.prepareStatement("insert into request_table values('"+hmEmp_Id.getText()+"','"+max+"','"+sdf.format(EmpDateChooser.getDate())+"','"+Pens+"','"+Pencils+"','"+Erasers+"','"+Papers+"','"+Clip_Folders+"','"+Paper_Folders+"','"+Paper_Bags+"','"+Envoleps+"','"+Clips+"','"+Staplers+"','"+Paper_Cutters+"','"+Paper_Punch+"','"+Scale+"','"+Tape+"','"+Sharpner+"','"+Notebook+"','"+Diary+"','"+requestStatus+"')");
    ps.executeUpdate();
    JOptionPane.showMessageDialog(null, "Request Added\nYour Request Number : "+reqNumber);
}
catch(Exception e)
{
    JOptionPane.showMessageDialog(null, e);
}   
    }                                            

    private void AddKartBTNActionPerformed(java.awt.event.ActionEvent evt) {                                           
       if((itemCodeTF.getText().equals(""))||(EmpQuantityTF.getText().equals(""))||(EmpQuantityTF.getText().equals("0"))){
           JOptionPane.showMessageDialog(null,"Item code, Item Name or quantity should not Empty or Zero!!! ");
       }else{
           int flag=0;
                 System.out.println(kartItemTBL.getRowCount());
       if(kartItemTBL.getRowCount()==0){
                Vector<String> column = new Vector<String>();
                column.addElement(itemCodeTF.getText());
                column.addElement(EmpItemTF.getText());
                column.addElement(EmpQuantityTF.getText());
                DefaultTableModel model = (DefaultTableModel) kartItemTBL.getModel();
                model.addRow(column);
            }else if(kartItemTBL.getRowCount()>0){
                for(int i=0;i<kartItemTBL.getRowCount();i++){
                    //System.out.println(kartItemTBL.getValueAt(i, 0));
                    if(kartItemTBL.getValueAt(i, 0).equals(itemCodeTF.getText())){
                        flag=1;
                    }
                }
                if(flag==0){
                    Vector<String> column = new Vector<String>();
                column.addElement(itemCodeTF.getText());
                column.addElement(EmpItemTF.getText());
                column.addElement(EmpQuantityTF.getText());
                DefaultTableModel model = (DefaultTableModel) kartItemTBL.getModel();
                model.addRow(column);
                }else{
                    JOptionPane.showMessageDialog(null, "Duplicate Entry Not Allowed");
                }
     
            }
       
       }
        
        
       
    }                                          

    private void searchBTNActionPerformed(java.awt.event.ActionEvent evt) {                                          
     
        
      Vector<String> column = new Vector<String>();
            column.addElement("DATE");
            column.addElement("ITEM NAME");
            column.addElement("QUANTITY");
            
            DefaultTableModel model = (DefaultTableModel) kartItemTBL.getModel();
            model.setDataVector(null, column);
        try
    {
    
    Statement st = con.createStatement();
    int max=0,requestNumber;
    if(requestNumberTF.getText().substring(0,3).equals("req")&&requestNumberTF.getText().length()>3){
         requestNumber=Integer.parseInt(requestNumberTF.getText().substring(3, requestNumberTF.getText().length()));
    //int Pens =0,Pencils=0,Erasers=0,Papers=0,Clip_Folders=0,Paper_Folders=0,Paper_Bags=0,Envoleps=0,Clips=0,Staplers=0,Paper_Cutters=0,Paper_Punch=0,Scale=0,Tape=0,Sharpner=0,Notebook=0,Diary=0;
    String reqNumber;
    Vector data = new Vector();
    Vector row = new Vector();
    int nonEmptyColumnCounter=0;
    //column.clear();
    
    ResultSet rs=st.executeQuery("Select * from request_table where request_number='"+requestNumber+"'");
    SimpleDateFormat sdf=new SimpleDateFormat("dd-MMM-yyyy");
    if(rs.next())
    {
        //Vector<String> column = new Vector<String>();
        if(rs.getInt(21)==1){
            requestLabel.setForeground(Color.GREEN);
            requestLabel.setText("Approved");
        }else if(rs.getInt(21)==0){
            // pending by default
        }else if(rs.getInt(21)==-1){
            requestLabel.setForeground(Color.red);
            requestLabel.setText("Rejected");
        }
        for(int i=4;i<20;i++){
            if(rs.getInt(i)>0){
                nonEmptyColumnCounter++;
            }
        }
        
        System.out.println(nonEmptyColumnCounter);
            for(int i=4;i<21;i++){
                //System.out.println(rs.getInt(i));
                row = new Vector(nonEmptyColumnCounter);
                if((rs.getInt(i))>0){ 
                switch(i) {
                    case 4:
                        row.addElement(rs.getString(3));
                        row.addElement("Pens");
                        row.addElement(rs.getString(i));
                        data.add(row);
                        break;
                    case 5:
                        row.addElement(rs.getString(3));
                        row.addElement("Pencil");
                        row.addElement(rs.getString(i));
                        data.add(row);                        
                        break;
                    case 6:
                        row.addElement(rs.getString(3));
                        row.addElement("Erasers");
                        row.addElement(rs.getString(i));
                        data.add(row);                        
                        break;
                    case 7:
                        row.addElement(rs.getString(3));
                        row.addElement("Papers");
                        row.addElement(rs.getString(i));
                        data.add(row);
                        break;
                    case 8:
                        row.addElement(rs.getString(3));
                        row.addElement("Clip Folders");
                        row.addElement(rs.getString(i));
                        data.add(row);                        
                        break;
                    case 9:
                        row.addElement(rs.getString(3));
                        row.addElement("Paper Folder");
                        row.addElement(rs.getString(i));
                        data.add(row);                        
                        break;
                    case 10:
                        row.addElement(rs.getString(3));
                        row.addElement("Paper Bags");
                        row.addElement(rs.getString(i));
                        data.add(row);
                        break;
                    case 11:
                        row.addElement(rs.getString(3));
                        row.addElement("Envelopes");
                        row.addElement(rs.getString(i));
                        data.add(row);                        
                        break;
                    case 12:
                        row.addElement(rs.getString(3));
                        row.addElement("Clips");
                        row.addElement(rs.getString(i));
                        data.add(row);                        
                        break;
                    case 13:
                        row.addElement(rs.getString(3));
                        row.addElement("Staplers");
                        row.addElement(rs.getString(i));
                        data.add(row);
                        break;
                    case 14:
                        row.addElement(rs.getString(3));
                        row.addElement("Paper Cutters");
                        row.addElement(rs.getString(i));
                        data.add(row);                        
                        break;
                    case 15:
                        row.addElement(rs.getString(3));
                        row.addElement("Paper Punch");
                        row.addElement(rs.getString(i));
                        data.add(row);                        
                        break;
                    case 16:
                        row.addElement(rs.getString(3));
                        row.addElement("Scale");
                        row.addElement(rs.getString(i));
                        data.add(row);
                        break;
                    case 17:
                        row.addElement(rs.getString(3));
                        row.addElement("Tape");
                        row.addElement(rs.getString(i));
                        data.add(row);                        
                        break;
                    case 18:
                        row.addElement(rs.getString(3));
                        row.addElement("Sharpner");
                        row.addElement(rs.getString(i));
                        data.add(row);                        
                        break;
                    case 19:
                        row.addElement(rs.getString(3));
                        row.addElement("Notebook");
                        row.addElement(rs.getString(i));
                        data.add(row);
                        break;
                    case 20:
                        row.addElement(rs.getString(3));
                        row.addElement("Diary");
                        row.addElement(rs.getString(i));
                        data.add(row);                        
                        break;
                    default:
                      System.out.println(column.capacity());
    // code block
                }
                
            }    
                //column.addElement(EmpItemTF.getText());
                //column.addElement(EmpQuantityTF.getText());
                //System.out.println(column);
            
            }
            model = (DefaultTableModel) kartItemTBL.getModel();
            model.setDataVector(data, column);
            
                
        //Object []x={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6)};
        //max=rs.getInt(1)+1;
        //EmpHmEmp_Name.setText(rs.getString(2));
        //EmpHmEmp_phone.setText(rs.getString(4));
        //EmpHmEmp_Email.setText(rs.getString(6));
       //Date date2 = new Date();
        //EmpDateChooser.setDate(date2);
        
    }else{
        JOptionPane.showMessageDialog(null,"Request Number not found!!!");
    }
    }else{
        JOptionPane.showMessageDialog(null,"Please Enter Correct Request Number!!!");
    }
   
    
    }catch(Exception e)
    {
        System.out.println(e+"");
    }
    }                                         

    private void EmpItemTFActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmpHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmpHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmpHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmpHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmpHomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton AddKartBTN;
    private com.toedter.calendar.JDateChooser EmpDateChooser;
    private javax.swing.JButton EmpHMLOGOUTbtn;
    private javax.swing.JTextField EmpHmEmp_Email;
    private javax.swing.JTextField EmpHmEmp_Name;
    private javax.swing.JTextField EmpHmEmp_phone;
    private javax.swing.JButton EmpHmRqstBTN;
    private javax.swing.JComboBox<String> EmpItemCombox;
    private javax.swing.JTextField EmpItemTF;
    private javax.swing.JTextField EmpQuantityTF;
    public javax.swing.JTextField hmEmp_Id;
    private javax.swing.JTextField itemCodeTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable kartItemTBL;
    private javax.swing.JLabel requestLabel;
    private javax.swing.JTextField requestNumberTF;
    private javax.swing.JButton searchBTN;
    // End of variables declaration                   
}
